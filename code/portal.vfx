HEADER
{
	DevShader = true;
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Portal";
	Version = 2;
}

MODES
{
	VrForward();

	Depth( "vr_depth_only_nonbindless.vfx" ); 

	ToolsVis( S_MODE_TOOLS_VIS );
	ToolsWireframe( "vr_tools_wireframe.vfx" );
}

FEATURES
{
	#include "vr_common_features.fxc"
}

COMMON
{
	#include "system.fxc"
	#include "vr_common.fxc" 

	#define S_UNLIT 1

	#define VS_INPUT_HAS_TANGENT_BASIS 1
	#define PS_INPUT_HAS_TANGENT_BASIS 1
}

struct VS_INPUT
{
	#include "vr_common_vs_input.fxc"
};

struct PS_INPUT
{
	#include "vr_common_ps_input.fxc"
};

VS
{
	#include "vr_common_vs_code.fxc"

	PS_INPUT MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PS_INPUT o;
		
		o = VS_CommonProcessing( i );

		return VS_CommonProcessing_Post( o );
	}
}

PS
{
	#include "vr_common_ps_code.fxc"

	CreateInputTexture2D( TextureColor, Srgb, 8, "", "_day_3k", "Textures", Default3( 0.9, 0.9, 0.9 ) );	
	CreateTexture2D( g_tColor ) < Channel( RGBA, None( TextureColor ), Srgb ); OutputFormat( DXT5 ); SrgbRead( true ); >;
	TextureAttribute( RepresentativeTextureDay, g_tColor );
	
	PS_OUTPUT MainPs( PS_INPUT i )
	{
		FinalCombinerInput_t finalCombinerInput = PS_CommonProcessing( i );
		LightingTerms_t lightingTerms = InitLightingTerms();
		
		float2 vScreenUv = CalculateViewportUv( i.vPositionSs );
		vScreenUv = i.vTextureCoords.xy;

		PS_OUTPUT ps_output;
		ps_output.vColor.rgba = float4(vScreenUv.xy, 0, 1);
		
		float4 texture = Tex2D( g_tColor, vScreenUv.xy );
		ps_output.vColor.rgba = float4( texture.rgb, 1.0 );
		ps_output.vColor.rgba = float4( i.vTextureCoords.xy, 0, 1.0 );

		ps_output = PS_FinalCombinerDoPostProcessing( finalCombinerInput, lightingTerms, ps_output );

		return ps_output;
	}
}
