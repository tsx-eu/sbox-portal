
@BaseClass = BaseProperties_local_portal
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// Sandbox.Entity.Cable
//
@PathClass base(BaseProperties_local_portal) 
metadata
{
	node_entity_class = "portal_cable"
}
= portal_cable : ""
[
	color(choices) : "Color" : 0 : "" =
	[
		0 : "Blue"
		1 : "Orange"
	]
	type(choices) : "Type" : 0 : "" =
	[
		0 : "New"
		1 : "Old"
	]
	ending(choices) : "Ending" : 0 : "" =
	[
		0 : "On Off"
		1 : "Timer"
		2 : "Corner"
	]
	facing(choices) : "Wall Direction" : 3 : "" =
	[
		0 : "Unkown"
		1 : "X"
		2 : "Y"
		3 : "Z"
	]

	input Enable(void) : ""
	input Disable(void) : ""
]

//
// PortalGame.Portal
//
@PointClass base(BaseProperties_local_portal) model() = portal : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "models/vrportal/portalshape.vmdl" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PortalGame.PortalGun
//
@PointClass base(BaseProperties_local_portal) = portal_gun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PortalGame.Button
//
@PointClass base(BaseProperties_local_portal) model() = portal_button : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "models/props/button_base.vmdl" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPress(void) : ""
	output OnRelease(void) : ""
]

//
// PortalGame.Cube
//
@PointClass base(BaseProperties_local_portal, BasePhysicsSimulated) tags( Physics ) model() = portal_cube : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "models/props/metal_box.vmdl" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// PortalGame.Door
//
@PointClass base(BaseProperties_local_portal) model() = portal_door : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "models/props/portal_door_combined.vmdl" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Open(void) : ""
	input Close(void) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PortalGame.Dropper
//
@PointClass base(BaseProperties_local_portal) model() = portal_dropper : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "models/props_backstage/item_dropper.vmdl" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	init_amount(integer) : "Initial amount of cube to drop" : 1 : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Open(void) : ""
	input Close(void) : ""
	input SetCube(integer) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PortalGame.SecurityCamera
//
@PointClass base(BaseProperties_local_portal) model() = portal_camera : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "models/props/security_camera.vmdl" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PortalGame.Wall
//
@SolidClass base(BaseProperties_local_portal) tags( Dynamic ) = portal_wall : ""
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	health(float) : "Health" : 0 : "If set to above 0, the entity will have this much health on spawn and will be breakable."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

