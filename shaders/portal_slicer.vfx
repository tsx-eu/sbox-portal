//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Portal Slicer Shader";

	DevShader = true;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"

	Feature( F_DISABLE_DEPTH, 0..1, "Disable Depth" );
}

MODES
{
    VrForward();													// Indicates this shader will be used for main rendering
    Depth( "vr_depth_only.vfx" ); 									// Shader that will be used for shadowing and depth prepass
    ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
    ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"

	#define S_TRANSLUCENT 1
	#define BLEND_MODE_ALREADY_SET
	#define DEPTH_STATE_ALREADY_SET
	#define STENCIL_ALREADY_SET
}

//=========================================================================================================================

struct VS_INPUT
{
	#include "vr_common_vs_input.fxc"
};

struct PS_INPUT
{
	#include "vr_common_ps_input.fxc"
	
	float3 vPositionOs : POSITION < Semantic( PosXyz ); >;
};

//=========================================================================================================================

VS
{
	#include "vr_common_vs_code.fxc"

	PS_INPUT MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PS_INPUT o;
		
		o = VS_CommonProcessing( i );

		return VS_CommonProcessing_Post( o );
	}
}
PS
{
	#include "vr_common_ps_code.fxc"
	
	float3 ClippingOffset < Default3( 0.0, 0.0, 0.0 ); >;
	float3 ClippingNormal < Default3( 0.0, 0.0, 0.0 ); >;
	float CutColorDistance < Default( 0.0 ); >;
	
	Float3Attribute( ClippingOffset, ClippingOffset );
	Float3Attribute( ClippingNormal, ClippingNormal );
	
	PS_OUTPUT MainPs( PS_INPUT i )
	{
		float3 vPositionWs = i.vPositionWithOffsetWs.xyz + g_vHighPrecisionLightingOffsetWs.xyz;
		vPositionWs = i.vPositionOs;
		
		float3 clipNormal = normalize(ClippingNormal);
		float d = dot(vPositionWs + (ClippingOffset * clipNormal), clipNormal);
		
		PS_OUTPUT ps_output;
		
		if(abs(d) <= CutColorDistance) {
			ps_output.vColor.r = 1;
		}
		else if(d > 0.0f) {
			ps_output.vColor.rgb = vPositionWs / 256.0f;
		}
		else {
			discard;
		}

		return ps_output;
	}
}
